(let ((x (make-array 0 :fill-pointer 0 :adjustable t))
      (a (vector 5 6 7))
      (b (vector 1 2 3 4)))
  (vector-push-extend a x)
  (vector-push-extend b x)
  (print (concatenate 'list a x))
  (print x))

(let ((x ()))
  (setf x (cons 1 x))
  (setf x (cons 2 x))
  (format t "~a~%" x)
  (format t "~a~%" (car x))
  (setf x (cdr x))
  (format t "~a~%" x))

(let ((x (make-instance 'anagram::node))
      (y (make-instance 'anagram::node))
      )
(equal x x)
  )
